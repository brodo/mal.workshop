(load-file "../mal6/env.mal")

;; Implement some core functions in mal itself so that we can
;; self-host earlier
(def! first (fn* (lst)
  (if (> (count lst) 0)
    (let* (f (fn* (x & xs) x))
      (apply f lst))
    nil)))

(def! rest (fn* (lst)
  (if (> (count lst) 0)
    (let* (r (fn* (x & xs) xs))
      (apply r lst))
    (list))))

(def! nth (fn* (lst idx)
  (if (> idx 0)
    (nth (rest lst) (- idx 1))
    (first lst))))

(def! cons (fn* (a lst)
  (apply list a lst)))

(def! map (fn* (f lst)
  (if (> (count lst) 0)
    (cons (f (first lst))
          (map f (rest lst)))
    (list))))

;; read
(def! READ (fn* (strng)
  (read-string strng)))

;; eval
(def! eval-ast (fn* (ast env)
  (if (symbol? ast)
    (env-get env ast)

    (if (list? ast)
        (map (fn* (exp) (EVAL exp env)) ast)

        ast))))

(def! LET (fn* (env args)
  (if (> (count args) 0)
    (do
      (env-set env (nth args 0) (EVAL (nth args 1) env))
      (LET env (rest (rest args)))))))

(def! EVAL (fn* (ast env)
  (if (not (list? ast))
    (eval-ast ast env)

    ;; apply list
    (let* (a0 (first ast))
      (if (= nil a0)
        ast

      (if (= "def!" (str a0))
        (env-set env (nth ast 1) (EVAL (nth ast 2) env))

      (if (= "let*" (str a0))
        (let* (let-env (new-env env))
          (do
            (LET let-env (nth ast 1))
            (EVAL (nth ast 2) let-env)))

      (let* (el (eval-ast ast env)
            f (first el)
            args (rest el))
        (apply f args)))))))))

;; print
(def! PRINT (fn* (exp) (pr-str exp)))

;; repl
(def! repl-env (new-env))
(def! rep (fn* (strng)
  (PRINT (EVAL (READ strng) repl-env))))

(env-set repl-env "+" +)
(env-set repl-env "-" -)
(env-set repl-env "*" *)
(env-set repl-env "/" /)

;; repl loop
(def! repl-loop (fn* ()
  (let* (line (readline "mal-user> "))
    (if line
      (do
        (if (not (= "" line))
          (println (rep line)))
        (repl-loop))))))

;; Interactive REPL
(def! -main (fn* (& args) 
  (repl-loop)))
(-main)
