;; Implement some core functions in mal itself so that we can
;; self-host earlier
(def! first (fn* (lst)
  (if (> (count lst) 0)
    (let* (f (fn* (x & xs) x))
      (apply f lst))
    nil)))

(def! rest (fn* (lst)
  (if (> (count lst) 0)
    (let* (r (fn* (x & xs) xs))
      (apply r lst))
    (list))))

(def! nth (fn* (lst idx)
  (if (> idx 0)
    (nth (rest lst) (- idx 1))
    (first lst))))

(def! cons (fn* (a lst)
  (apply list a lst)))

(def! map (fn* (f lst)
  (if (> (count lst) 0)
    (cons (f (first lst))
          (map f (rest lst)))
    (list))))

;; read
(def! READ (fn* (strng)
  (read-string strng)))

;; eval
(def! env-get (fn* (env ast)
  (if (> (count env) 1)
    (let* (x (first env)
           y (nth env 1))
      (if (= x (str ast))
        y
        (env-get (rest (rest env)) ast)))
    (eval ast))))

(def! eval-ast (fn* (ast env)
  (if (symbol? ast)
    (env-get env ast)

    (if (list? ast)
        (map (fn* (exp) (EVAL exp env)) ast)

        ast))))


(def! EVAL (fn* (ast env)
  (if (not (list? ast))
    (eval-ast ast env)

    ;; apply list
    (if (empty? ast)
      ast
      (let* (el (eval-ast ast env)
            f (first el)
            args (rest el))
        (apply f args))))))

;; print
(def! PRINT (fn* (exp) (pr-str exp)))

(def! repl-env (list "+" +
                     "-" -
                     "*" * 
                     "/" /))
(def! rep (fn* (strng)
  (PRINT (EVAL (READ strng) repl-env))))

;; repl loop
(def! repl-loop (fn* ()
  (let* (line (readline "mal-user> "))
    (if line
      (do
        (if (not (= "" line))
          (println (rep line)))
        (repl-loop))))))

;; Interactive REPL
(def! -main (fn* (& args) 
  (repl-loop)))
(-main)
