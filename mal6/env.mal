
(def! bind-env (fn* (data b e)
  (if (empty? b)
    data

    (if (= "&" (str (first b)))
      (cons (nth b 1) (cons e data))

      (bind-env (cons (first b) (cons (first e) data))
                (rest b)
                (rest e))))))

(def! new-env (fn* (& args)
  (if (<= (count args) 1)
    (atom (list (first args)
                (list)))
    (atom (list (first args)
                (bind-env (list)
                          (nth args 1)
                          (nth args 2)))))))


(def! contains? (fn* (data k)
  (if (> (count data) 1)
    (let* (x (first data))
      (if (= (str x) (str k))
        true
        (contains? (rest (rest data)) k)))
    false)))

(def! get (fn* (data k)
  (if (> (count data) 1)
    (let* (x (first data)
           v (first (rest data)))
      (if (= (str x) (str k))
        v
        (get (rest (rest data)) k)))
    (throw (str k " not found")))))


(def! env-find (fn* (env k)
  (let* (e (deref env)
         outer (first e)
         data (first (rest e))
         ks (str k))
    (if (contains? data ks)
      env
      (if outer
        (env-find outer k)
        nil)))))

(def! env-get (fn* (env k)
  (let* (e (env-find env k))
    (if e
      (get (first (rest (deref e))) k)
      (throw (str k " not found"))))))

(def! env-set (fn* (env k v)
  (do
    (reset! env
      (let* (e (deref env)
             outer (first e)
             data (first (rest e)))
        (list outer
              (cons k (cons v data)))))
    v)))
